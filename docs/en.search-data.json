{"/about/":{"data":{"":"","biography#Biography":" Expertise Proven experience as CEO and other managerial position Business consultant in deep-tech fields, with targets: in tech- developing profitable strategies, valuations and validation, effectiveness, optimisation. DDD (Data Dreaven Developmenr) busines execurion Data Scientist with research and analytics in a certain domains of software development. Researcher in: code analysis techniques, validation of software, efficient software in the production. Clear vision Developed business strategy requires that a CEO be many steps ahead of the general public in seeing and understanding how trends may evolve. **Strong leadership.**Attracted talented human capital that uspported the company’s mission and vision. Experience AI systems Implementation (LLM, Generative). Code Analysis with AI systems. Software Design. Deep Tech Solutions. BigData Provisioning and Data Driven Solutions (DSA-Tool-chain). Qualifications MBA Certified. Career in software development 20 years. ","passion-and-purpose#Passion and purpose":" My passion is to discover on a deep level necessary in-tech challenges for a business needs and understand ppotential of their perspectives. Extraordinary passion. It takes a special kind of leader to be able to handle the pressure and the scrutiny that comes with such a high-profile position.","special-thanks#Special thanks":"Tank you for visiting my profile!","why-it-matters#Why it matters?!":" Through shared discovery, our readers and I can benefit. We can gain collaborative value by solving problems and tech puzzles. I hope it might be helpful to many of our readers in focus on tech topics or the business strategy planning."},"title":"Aaron Leibman"},"/blog/":{"data":{"":""},"title":"Categories"},"/categories/advanced2/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/categories/advanced2/customization.zh-cn/":{"data":{"":"Hextra 在 hugo.yaml 中提供了一些自定义选项来配置主题。 本页介绍了可用选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 将自动加载该文件，比如自定义字体：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 主题色 主题色可以通过设置 --primary-hue 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; } 代码高亮 代码高亮风格的详细信息可在 Chroma Styles Gallery 中找到。 可以使用以下命令生成样式表：\n$ hugo gen chromastyles --style=github 可将生成的样式添加到自定义 CSS 文件中以覆盖默认代码高亮样式。","自定义-script#自定义 Script":"你可以添加以下文件以自定义 script 添加到每页的 head 最后：\nlayouts/partials/custom/head-end.html ","自定义布局#自定义布局":"可以在站点的 layouts 目录中创建同名文件来覆盖主题的默认布局。 例如，要覆盖文档的 single.html 布局，在站点中创建文件 layouts/docs/single.html。\n如需或许更多信息，转至 Hugo Templates。","进一步定制-hextra#进一步定制 Hextra":"没有找到你想修改的东西？在 GitHub 上创建 Issues 或为 Hextra 贡献你的智慧！"},"title":"自定义"},"/categories/advanced2/customization/":{"data":{"":"Hextra offers some default customization options in the hugo.yaml config file to configure the theme. This page describes the available options and how to customize the theme further.","custom-css#Custom CSS":"To add custom CSS, we need to create a file assets/css/custom.css in our site. Hextra will automatically load this file.\nFont Family The font family of the content can be customized using:\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } Inline Code Element The color of text mixed with other text can customized with:\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } Primary Color The primary color of the theme can be customized by setting the --primary-hue and --primary-saturation variables:\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; } Syntax Highlighting List of available syntax highlighting themes are available at Chroma Styles Gallery. The stylesheet can be generated using the command:\n$ hugo gen chromastyles --style=github To override the default syntax highlighting theme, we can add the generated styles to the custom CSS file.","custom-layouts#Custom Layouts":"The layouts of the theme can be overridden by creating a file with the same name in the layouts directory of your site. For example, to override the single.html layout for docs, create a file layouts/docs/single.html in your site.\nFor further information, refer to the Hugo Templates.","custom-scripts#Custom Scripts":"You may add custom scripts to the end of the head for every page by adding the following file:\nlayouts/partials/custom/head-end.html ","further-customization#Further Customization":"Didn’t find what you were looking for? Feel free to open an issue or make a contribution to the theme!"},"title":"Customization"},"/categories/advanced2/multi-language.zh-cn/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式 创建多语言的网站。","启用多语言支持#启用多语言支持":"为了使我们的网站支持多语言，我们需要告诉 Hugo 需要支持的语言。 在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","按文件名管理翻译#按文件名管理翻译":"Hugo 支持按文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个翻译为法语的文件 content/docs/_index.fr.md。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持按内容目录管理翻译。","更多参考#更多参考":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite ","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 "},"title":"多语言"},"/categories/advanced2/multi-language/":{"data":{"":"Hextra supports creating site with multiple languages using Hugo’s multilingual mode.","enable-multi-language#Enable Multi-language":"To make our site multi-language, we need to tell Hugo the supported languages. We need to add to the site configuration file:\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","manage-translations-by-filename#Manage Translations by Filename":"Hugo supports managing translations by filename. For example, if we have a file content/docs/_index.md in English, we can create a file content/docs/_index.fr.md for French translation.\ncontent docs _index.md _index.fr.md _index.ja.md Note: Hugo also supports Translation by content directory.","read-more#Read More":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","translate-menu-items#Translate Menu Items":"To translate menu items in the navigation bar, we need to set the identifier field:\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 and translate them in the corresponding i18n file:\ni18n/fr.yamldocumentation: Documentation blog: Blog ","translate-strings#Translate Strings":"To translate strings on the other places, we need to add the translation to the corresponding i18n file:\ni18n/fr.yamlreadMore: Lire la suite A list of strings used in the theme can be found in the i18n/en.yaml file."},"title":"Multi-language"},"/categories/getting-started/":{"data":{"":"","next#Next":"Explore the following sections to start adding more contents:\nOrganize Files Configuration Markdown ","quick-start-from-template#Quick Start from Template":" imfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\n🌐 Demo ↗","start-as-new-project#Start as New Project":"There are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project’s themes folder.\nSetup Hextra as Hugo module Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps Initialize a new Hugo site $ hugo new site my-site --format=yaml Configure Hextra theme via module # initialize hugo module $ cd my-site $ hugo mod init github.com/username/my-site # add Hextra theme $ hugo mod get github.com/imfing/hextra Configure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra Create your first content pages Create new content page for the home page and the documentation page:\n$ hugo new content/_index.md $ hugo new content/docs/_index.md Preview the site locally $ hugo server --buildDrafts --disableFastRender Voila, your new site preview is available at http://localhost:1313/.\nHow to update theme? To update all Hugo modules in your project to their latest versions, run the following command:\n$ hugo mod get -u To update Hextra to the latest released version, run the following command:\nhugo mod get -u github.com/imfing/hextra See Hugo Modules for more details.\nSetup Hextra as Git submodule Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Steps Initialize a new Hugo site $ hugo new site my-site --format=yaml Add Hextra theme as a Git submodule git submodule add https://github.com/imfing/hextra.git themes/hextra Configure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra Create your first content pages Create new content page for the home page and the documentation page:\n$ hugo new content/_index.md $ hugo new content/docs/_index.md Preview the site locally $ hugo server --buildDrafts --disableFastRender Your new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it’s essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init Failure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nHow to update theme? To update all submodules in your repository to their latest commits, run the following command:\n$ git submodule update --remote To update Hextra to the latest commit, run the following command:\ngit submodule update --remote themes/hextra See Git submodules for more details."},"title":"Getting Started"},"/categories/guide2/configuration/":{"data":{"":"Hugo reads its configuration from hugo.yaml in the root of your Hugo site. The config file is where you can configure all aspects of your site. Check out the config file for this site exampleSite/hugo.yaml on GitHub to get a comprehensive idea of available settings and best practices.","footer#Footer":"Copyright To modify the copyright text displayed in your website’s footer, you’ll need to create a file named i18n/en.yaml. In this file, specify your new copyright text as shown below:\ni18n/en.yamlcopyright: \"© 2023 YOUR TEXT HERE\" For your reference, an example i18n/en.yaml file can be found in the GitHub repository. Additionally, you could use Markdown format in the copyright text.","navigation#Navigation":"Menu Top right menu is defined under the menu.main section in the config file:\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github There are different types of menu items:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github These menu items can be sorted by setting the weight parameter.\nLogo and Title To modify the default logo, edit hugo.yaml and add the path to your logo file under static directory. Optionally, you can change the link that users are redirected to when clicking on your logo, as well as set the width \u0026 height of the logo in pixels.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","others#Others":"Favicon To customize the favicon for your site, place icon files under the static folder to override the default favicons from the theme:\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest Include both favicon.ico and favicon.svg files in your project to ensure your site’s favicons display correctly.\nWhile favicon.ico is generally for older browsers, favicon.svg is supported by modern ones. The optional favicon-dark.svg can be included for a tailored experience in dark mode. Feel free to use tools like favicon.io or favycon to generate these icons.\nTheme Configuration Use the theme setting to configure the default theme mode and toggle button, allowing visitors to switch between light or dark mode.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true Options for theme.default:\nlight - always use light mode dark - always use dark mode system - sync with the operating system setting (default) The theme.displayToggle parameter allows you to display a toggle button for changing themes. When set to true, visitors can switch between light or dark mode, overriding the default setting.\nPage Width The width of the page can be customized by the params.page.width parameter in the config file:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide There are three available options: full, wide, and normal. By default, the page width is set to normal.\nSimilarly, the width of the navbar and footer can be customized by the params.navbar.width and params.footer.width parameters.\nSearch Index Full-text search powered by FlexSearch is enabled by default. To customize the search index, set the params.search.flexsearch.index parameter in the config file:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content Options for flexsearch.index:\ncontent - full content of the page (default) summary - summary of the page, see Hugo Content Summaries for more details heading - level 1 and level 2 headings title - only include the page title To exclude a page from the search index, set the excludeSearch: true in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics To enable Google Analytics, set services.googleAnalytics.ID flag in hugo.yaml:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","right-sidebar#Right Sidebar":"Table of Contents Table of contents is automatically generated from the headings in the content file. It can be disabled by setting toc: false in the front matter of the page.\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- Page Edit Link To configure the page edit link, we can set the params.editURL.base parameter in the config file:\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" The edit links will be automatically generated for each page based on the provided url as root directory. If you want to set edit link for a specific page, you can set the params.editURL parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration params: editURL: \"https://example.com/edit/this/page\" --- ","sidebar#Sidebar":"Main Sidebar For the main sidebar, it is automatically generated from the structure of the content directory. See the Organize Files page for more details.\nExtra Links Sidebar extra links are defined under the menu.sidebar section in the config file:\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 "},"title":"Configuration"},"/categories/guide2/deploy-site/":{"data":{"":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.","cloudflare-pages#Cloudflare Pages":" Put your site source code in a Git repository (e.g. GitHub) Log in to the Cloudflare dashboard and select your account In Account Home, select Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git Select the repository, and in the Set up builds and deployments section, provide the following information: Configuration Value Production branch main Build command hugo --gc --minify Build directory public For more details, check out:\nDeploy a Hugo site. Language support and tools. ","github-pages#GitHub Pages":"GitHub Pages is the recommended way to deploy and host your website for free.\nIf you bootstrap the site using hextra-starter-template, it has provided GitHub Actions workflow out-of-the-box that helps automatically deploy to GitHub Pages.\nGitHub Actions Configuration Below is an example configuration from hextra-starter-template:\n.github/workflows/pages.yaml# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\"main\"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.117.0 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Go uses: actions/setup-go@v4 with: go-version: '1.21' - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.117.0' extended: true - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v2 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 In your repository settings, set the Pages \u003e Build and deployment \u003e Source to GitHub Actions: By default, the above GitHub Actions workflow .github/workflows/pages.yaml assumes that the site is deploying to https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/.\nIf you are deploying to https://\u003cUSERNAME\u003e.github.io/ then modify the --baseURL:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" If you are deploying to your own domain, please change the --baseURL value accordingly.","netlify#Netlify":" Push your code to your Git repository (GitHub, GitLab, etc.) Import the project to Netlify If you are not using [hextra-starter-template][hextra-starter-template], configure the following manually: Configure the Build command to hugo --gc --minify Specify the Publish directory to public Add Environment variable HUGO_VERSION and set to 0.119.0 Deploy! Check Hugo on Netlify for more details.","vercel#Vercel":" Push your code to your Git repository (GitHub, GitLab, etc.) Go to Vercel Dashboard and import your Hugo project Configure the project, select Hugo as Framework Preset Override the Build Command and Install command: Set Build Command to hugo --gc --minify Set Install Command to yum install golang "},"title":"Deploy Site"},"/categories/guide2/diagrams/":{"data":{"":"Currently, Hextra supports Mermaid for diagrams.","mermaid#Mermaid":"Mermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser. For example, Mermaid can render flow charts, sequence diagrams, pie charts and more.\nUsing Mermaid in Hextra is as simple as writing a code block with language set mermaid:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` will be rendered as:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!For more information, please refer to Mermaid Documentation."},"title":"Diagrams"},"/categories/guide2/latex/":{"data":{"":"$\\KaTeX$ is used for rendering LaTeX math expressions. It can be enabled per page by setting math to true in the page front matter.\nMarkdown--- title: \"My Page with LaTeX\" math: true --- When enabled, the scripts, stylesheets and fonts from KaTeX will be included automatically in your site. You can start using LaTeX math expressions in your Markdown content.","chemistry#Chemistry":"Chemistry expressions are supported via mhchem extension.\nInline: $\\ce{H2O}$ is water.\nSeparate paragraph:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","example#Example":"Both inline and separate paragraph LaTeX math expressions are supported in the Markdown content.\nInline page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\nSeparate Paragraph page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ will be rendered as:\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$","supported-functions#Supported Functions":"For a list of supported functions, see KaTeX supported functions."},"title":"LaTeX"},"/categories/guide2/markdown/":{"data":{"":"Hugo supports Markdown syntax for formatting text, creating lists, and more. This page will show you some of the most common Markdown syntax examples.","configuration#Configuration":"Hugo uses Goldmark for Markdown parsing. Markdown rendering can be configured in hugo.yaml under markup.goldmark. Below is the default configuration for Hextra:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false For more configuration options, see Hugo documentation on Configure Markup.","learning-resources#Learning Resources":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","markdown-examples#Markdown Examples":"Styling Text Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text Blockquotes Blockquote with attribution\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren’t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Syntax Highlighting Lists Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Images With caption:\nUnsplash Landscape The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎"},"title":"Markdown"},"/categories/guide2/organize-files/":{"data":{"":"","add-images#Add Images":"To add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent docs my-page.md image.png Then, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png) We can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) Alternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic images image.png content docs my-page.md Note that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png) ","configure-content-directory#Configure Content Directory":"By default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.","directory-structure#Directory Structure":"By default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md Each of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","layouts#Layouts":"Hextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section’s _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- The above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.","sidebar-navigation#Sidebar Navigation":"The sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ It is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections. "},"title":"Organize Files"},"/categories/guide2/shortcodes/callout/":{"data":{"":"A built-in component to show important information to the reader.","example#Example":" 👾 A callout is a short piece of text intended to attract attention. ℹ️ A callout is a short piece of text intended to attract attention. ⚠️ A callout is a short piece of text intended to attract attention. 🚫 A callout is a short piece of text intended to attract attention. ","usage#Usage":"Default 🌐 Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"🌐\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ℹ️ Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ⚠️ This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error 🚫 Something went wrong and it’s going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} "},"title":"Callout"},"/categories/guide2/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":" Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. ","example#Example":" Callout No Icon Image CardUnsplash Landscape Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. ","image-card#Image Card":"Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo’s image processing method. options Configures Hugo’s image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo’s static/ directory. Processed image: use the relative path in Hugo’s assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo’s built in image processing commands, methods, and options see their Image Processing Documentation.","usage#Usage":"{{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} "},"title":"Cards"},"/categories/guide2/shortcodes/details/":{"data":{"":"A built-in component to display a collapsible content.","example#Example":" Details This is the content of the details.\nMarkdown is supported.\nClick me to reveal This will be hidden by default. ","usage#Usage":"{{%/* details title=\"Details\" */%}} This is the content of the details. Markdown is **supported**. {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} This will be hidden by default. {{%/* /details */%}} "},"title":"Details"},"/categories/guide2/shortcodes/filetree/":{"data":{"":"","example#Example":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml ","usage#Usage":"Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} "},"title":"FileTree"},"/categories/guide2/shortcodes/icon/":{"data":{"":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.","example#Example":" ","usage#Usage":"{{\u003c/* icon \"github\" */\u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} Tip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/categories/guide2/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","example#Example":" Step 1 This is the first step.\nStep 2 This is the second step.\nStep 3 This is the third step.","usage#Usage":"Put Markdown h3 header within steps shortcode.\n{{%/* steps */%}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{%/* /steps */%}} "},"title":"Steps"},"/categories/guide2/shortcodes/tabs/":{"data":{"":"","example#Example":"JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. ","usage#Usage":"Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. Use Markdown Markdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" "},"title":"Tabs"},"/categories/guide2/syntax-highlighting/":{"data":{"":"Hugo uses Chroma, a general purpose syntax highlighter in pure Go, for syntax highlighting. It is recommended to use backticks for code blocks in Markdown content. For example:\nMarkdown```python def say_hello(): print(\"Hello!\") ``` will be rendered as:\ndef say_hello(): print(\"Hello!\") ","features#Features":"Filename To add a filename or title to the code block, set attribute filename:\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") Line Numbers To set line numbers, set attribute linenos to table and optionally set linenostart to the starting line number:\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") Highlighting Lines To highlight lines, set attribute hl_lines to a list of line numbers:\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() Copy Button By default, copy button is enabled for code blocks.","supported-languages#Supported Languages":"For a list of supported languages, please see the Chroma documentation."},"title":"Syntax Highlighting"},"/categories_/_ndex/":{"data":{"":"Test Content"},"title":"T1"},"/docs/":{"data":{"":"👋 Hello! Welcome to the Hextra documentation!","features#Features":" Beautiful Design - Inspired by Nextra, Hextra utilizes Tailwind CSS to offer a modern design that makes your site look outstanding. Responsive Layout and Dark Mode - It looks great on all devices, from mobile, tablet to desktop. Dark mode is also supported to accommodate various lighting conditions. Fast and Lightweight - Powered by Hugo, a lightning-fast static-site generator housed in a single binary file, Hextra keeps its footprint minimal. No JavaScript or Node.js are needed to use it. Full-text Search - Built-in offline full-text search powered by FlexSearch, no additional configuration required. Battery-included - Markdown, syntax highlighting, LaTeX math formulae, diagrams and Shortcodes elements to enhance your content. Table of contents, breadcrumbs, pagination, sidebar navigation and more are all automatically generated. Multi-language and SEO Ready - Multi-language sites made easy with Hugo’s multilingual mode. Out-of-the-box support is included for SEO tags, Open Graph, and Twitter Cards. ","next#Next":"Dive right into the following section to get started:\nGetting StartedLearn how to create website using Hextra ","questions-or-feedback#Questions or Feedback?":" ❓ Hextra is still in active development. Have a question or feedback? Feel free to open an issue! ","what-is-hextra#What is Hextra?":"Hextra is a modern, fast and batteries-included [Hugo][hugo] theme built with [Tailwind CSS][tailwind-css].\nDesigned for building beautiful websites for documentation, blogs, and websites, it provides out-of-the-box features and flexibility to meet various requirements."},"title":"Documentation"},"/docs/advanced/":{"data":{"":"This section covers some advanced topics of the theme.\nMulti-language Customization Comments System "},"title":"Advanced"},"/docs/advanced/comments/":{"data":{"":"Hextra supports adding comments system to your site. Currently giscus is supported.","giscus#giscus":"giscus is a comments system powered by GitHub Discussions. It is free and open source.\nTo enable giscus, you need to add the following to the site configuration file:\nhugo.yamlparams: comments: enable: false type: giscus giscus: repo: \u003crepository\u003e repoId: \u003crepository ID\u003e category: \u003ccategory\u003e categoryId: \u003ccategory ID\u003e The giscus configurations can be constructed from the giscus.app website. More details can also be found there.\nComments can be enabled or disabled for a specific page in the page front matter:\ncontent/docs/about.md--- title: About comments: true --- "},"title":"Comments"},"/docs/advanced/customization.zh-cn/":{"data":{"":"Hextra 在 hugo.yaml 中提供了一些自定义选项来配置主题。 本页介绍了可用选项以及如何进一步自定义主题。","自定义-css#自定义 CSS":"要添加自定义 CSS，我们需要在站点中创建一个文件 assets/css/custom.css。Hextra 将自动加载该文件，比如自定义字体：\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } 主题色 主题色可以通过设置 --primary-hue 变量来自定义：\nassets/css/custom.css:root { --primary-hue: 100deg; } 代码高亮 代码高亮风格的详细信息可在 Chroma Styles Gallery 中找到。 可以使用以下命令生成样式表：\n$ hugo gen chromastyles --style=github 可将生成的样式添加到自定义 CSS 文件中以覆盖默认代码高亮样式。","自定义-script#自定义 Script":"你可以添加以下文件以自定义 script 添加到每页的 head 最后：\nlayouts/partials/custom/head-end.html ","自定义布局#自定义布局":"可以在站点的 layouts 目录中创建同名文件来覆盖主题的默认布局。 例如，要覆盖文档的 single.html 布局，在站点中创建文件 layouts/docs/single.html。\n如需或许更多信息，转至 Hugo Templates。","进一步定制-hextra#进一步定制 Hextra":"没有找到你想修改的东西？在 GitHub 上创建 Issues 或为 Hextra 贡献你的智慧！"},"title":"自定义"},"/docs/advanced/customization/":{"data":{"":"Hextra offers some default customization options in the hugo.yaml config file to configure the theme. This page describes the available options and how to customize the theme further.","custom-css#Custom CSS":"To add custom CSS, we need to create a file assets/css/custom.css in our site. Hextra will automatically load this file.\nFont Family The font family of the content can be customized using:\nassets/css/custom.css.content { font-family: \"Times New Roman\", Times, serif; } Inline Code Element The color of text mixed with other text can customized with:\nassets/css/custom.css.content code:not(.code-block code) { color: #c97c2e; } Primary Color The primary color of the theme can be customized by setting the --primary-hue and --primary-saturation variables:\nassets/css/custom.css:root { --primary-hue: 100deg; --primary-saturation: 90%; } Syntax Highlighting List of available syntax highlighting themes are available at Chroma Styles Gallery. The stylesheet can be generated using the command:\n$ hugo gen chromastyles --style=github To override the default syntax highlighting theme, we can add the generated styles to the custom CSS file.","custom-layouts#Custom Layouts":"The layouts of the theme can be overridden by creating a file with the same name in the layouts directory of your site. For example, to override the single.html layout for docs, create a file layouts/docs/single.html in your site.\nFor further information, refer to the Hugo Templates.","custom-scripts#Custom Scripts":"You may add custom scripts to the end of the head for every page by adding the following file:\nlayouts/partials/custom/head-end.html ","further-customization#Further Customization":"Didn’t find what you were looking for? Feel free to open an issue or make a contribution to the theme!"},"title":"Customization"},"/docs/advanced/multi-language.zh-cn/":{"data":{"":"Hextra 支持使用 Hugo 的多语言模式 创建多语言的网站。","启用多语言支持#启用多语言支持":"为了使我们的网站支持多语言，我们需要告诉 Hugo 需要支持的语言。 在站点配置文件中添加：\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","按文件名管理翻译#按文件名管理翻译":"Hugo 支持按文件名管理翻译。例如，如果我们有一个英文文件 content/docs/_index.md，我们可以创建一个翻译为法语的文件 content/docs/_index.fr.md。\ncontent docs _index.md _index.fr.md _index.ja.md 注意：Hugo 还支持按内容目录管理翻译。","更多参考#更多参考":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","翻译字符串#翻译字符串":"要翻译其他地方的字符串，我们需要将翻译添加到相应的 i18n 文件中：\ni18n/fr.yamlreadMore: Lire la suite ","翻译菜单项#翻译菜单项":"要翻译导航栏中的菜单项，我们需要设置 identifier 字段：\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 "},"title":"多语言"},"/docs/advanced/multi-language/":{"data":{"":"Hextra supports creating site with multiple languages using Hugo’s multilingual mode.","enable-multi-language#Enable Multi-language":"To make our site multi-language, we need to tell Hugo the supported languages. We need to add to the site configuration file:\nhugo.yamldefaultContentLanguage: en languages: en: languageName: English weight: 1 fr: languageName: Français weight: 2 ja: languageName: 日本語 weight: 3 ","manage-translations-by-filename#Manage Translations by Filename":"Hugo supports managing translations by filename. For example, if we have a file content/docs/_index.md in English, we can create a file content/docs/_index.fr.md for French translation.\ncontent docs _index.md _index.fr.md _index.ja.md Note: Hugo also supports Translation by content directory.","read-more#Read More":" Hugo Multilingual Mode Hugo Multilingual Part 1: Content translation Hugo Multilingual Part 2: Strings localization ","translate-menu-items#Translate Menu Items":"To translate menu items in the navigation bar, we need to set the identifier field:\nhugo.yamlmenu: main: - identifier: documentation name: Documentation pageRef: /docs weight: 1 - identifier: blog name: Blog pageRef: /blog weight: 2 and translate them in the corresponding i18n file:\ni18n/fr.yamldocumentation: Documentation blog: Blog ","translate-strings#Translate Strings":"To translate strings on the other places, we need to add the translation to the corresponding i18n file:\ni18n/fr.yamlreadMore: Lire la suite A list of strings used in the theme can be found in the i18n/en.yaml file."},"title":"Multi-language"},"/docs/getting-started.zh-cn/":{"data":{"":"","作为新项目开始#作为新项目开始":"前提条件 在开始之前，请确保我们已经安装了 Hugo。 请参考 Hugo 的官方安装指南以获取更多详情。\nHugo 模块是管理 Hugo 主题的推荐方式。要使用 Hugo 模块，我们需要安装 Git 和 Go。\n初始化 Hugo 站点 $ hugo new site my-site --format=yaml 通过模块配置 Hextra 主题 # 初始化 Hugo 模块 $ cd my-site $ hugo mod init github.com/username/my-site # 添加 Hextra $ hugo mod get github.com/imfing/hextra 编辑 hugo.yaml 以启用 Hextra：\nmodule: imports: - path: github.com/imfing/hextra 创建你的第一个内容页 让我们为主页和文档页面创建一个新的内容页面：\n$ hugo new content/_index.md $ hugo new content/docs/_index.md 在本地预览站点 $ hugo server --buildDrafts --disableFastRender 瞧！你现在可以在 http://localhost:1313/ 看到你的新站点。","使用模板快速开始#使用模板快速开始":" imfing/hextra-starter-template\n通过使用上面的模板仓库，您将能够快速地开始。\n我们提供了一个 GitHub Actions 工作流，它可以帮助您自动构建并部署您的网站到 GitHub Pages，并免费托管。\n🌐 演示 ↗","接下来#接下来":"你可以探索以下部分来添加更多内容：\n目录结构 配置文件指南 Markdown "},"title":"快速开始"},"/docs/getting-started/":{"data":{"":"","next#Next":"Explore the following sections to start adding more contents:\nOrganize Files Configuration Markdown ","quick-start-from-template#Quick Start from Template":" imfing/hextra-starter-template\nYou could quickly get started by using the above template repository.\nWe have provided a GitHub Actions workflow which can help automatically build and deploy your site to GitHub Pages, and host it for free. For more options, check out Deploy Site.\n🌐 Demo ↗","start-as-new-project#Start as New Project":"There are two main ways to add the Hextra theme to your Hugo project:\nHugo Modules (Recommended): The simplest and recommended method. Hugo modules let you pull in the theme directly from its online source. Theme is downloaded automatically and managed by Hugo.\nGit Submodule: Alternatively, add Hextra as a Git Submodule. The theme is downloaded by Git and stored in your project’s themes folder.\nSetup Hextra as Hugo module Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Go Steps Initialize a new Hugo site $ hugo new site my-site --format=yaml Configure Hextra theme via module # initialize hugo module $ cd my-site $ hugo mod init github.com/username/my-site # add Hextra theme $ hugo mod get github.com/imfing/hextra Configure hugo.yaml to use Hextra theme by adding the following:\nmodule: imports: - path: github.com/imfing/hextra Create your first content pages Create new content page for the home page and the documentation page:\n$ hugo new content/_index.md $ hugo new content/docs/_index.md Preview the site locally $ hugo server --buildDrafts --disableFastRender Voila, your new site preview is available at http://localhost:1313/.\nHow to update theme? To update all Hugo modules in your project to their latest versions, run the following command:\n$ hugo mod get -u To update Hextra to the latest released version, run the following command:\nhugo mod get -u github.com/imfing/hextra See Hugo Modules for more details.\nSetup Hextra as Git submodule Prerequisites Before starting, you need to have the following software installed:\nHugo (extended version) Git Steps Initialize a new Hugo site $ hugo new site my-site --format=yaml Add Hextra theme as a Git submodule git submodule add https://github.com/imfing/hextra.git themes/hextra Configure hugo.yaml to use Hextra theme by adding the following:\ntheme: hextra Create your first content pages Create new content page for the home page and the documentation page:\n$ hugo new content/_index.md $ hugo new content/docs/_index.md Preview the site locally $ hugo server --buildDrafts --disableFastRender Your new site preview is available at http://localhost:1313/.\nWhen using CI/CD for Hugo website deployment, it’s essential to ensure that the following command is executed before running the hugo command.\ngit submodule update --init Failure to run this command results in the theme folder not being populated with Hextra theme files, leading to a build failure.\nHow to update theme? To update all submodules in your repository to their latest commits, run the following command:\n$ git submodule update --remote To update Hextra to the latest commit, run the following command:\ngit submodule update --remote themes/hextra See Git submodules for more details."},"title":"Getting Started"},"/docs/guide/":{"data":{"":"Explore the following sections to learn how to use Hextra:\nOrganize Files Configuration Markdown Syntax Highlighting LaTeX Diagrams Shortcodes Deploy Site "},"title":"Guide"},"/docs/guide/configuration.zh-cn/":{"data":{"":"Hugo 从 Hugo 网站根目录下的 hugo.yaml 读取配置。 在配置文件中，您可以配置站点的所有选项。 你可以在 exampleSite/hugo.yaml 中找到此站点的配置文件作为开始。","侧边栏#侧边栏":"主侧边栏 主侧边栏是自动从 content 目录结构生成的。 有关更多详细信息，转至 目录结构。\n额外链接 侧边栏的额外链接在配置文件的 menu.sidebar 部分中配置：\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 ","右侧边栏#右侧边栏":"目录 目录是根据内容文件中的标题自动生成的，可以在 front matter 设置 toc：false 来禁用它。\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- 编辑此页链接 要配置编辑此页链接，我们可以在配置文件中设置 params.editURL.base：\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" 将为每个页面自动生成编辑链接。 如需为特定页面设置编辑链接，可以在页面的 front matter 中设置 params.editURL：\ncontent/docs/guide/configuration.md--- title: Configuration params: editURL: \"https://example.com/edit/this/page\" --- ","导航栏#导航栏":"菜单 右上角的菜单在配置文件的 menu.main 中配置：\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github 有几种不同类型的菜单项:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github 这些菜单项可以通过设置 weight 进行排序。"},"title":"配置文件"},"/docs/guide/configuration/":{"data":{"":"Hugo reads its configuration from hugo.yaml in the root of your Hugo site. The config file is where you can configure all aspects of your site. Check out the config file for this site exampleSite/hugo.yaml on GitHub to get a comprehensive idea of available settings and best practices.","footer#Footer":"Copyright To modify the copyright text displayed in your website’s footer, you’ll need to create a file named i18n/en.yaml. In this file, specify your new copyright text as shown below:\ni18n/en.yamlcopyright: \"© 2023 YOUR TEXT HERE\" For your reference, an example i18n/en.yaml file can be found in the GitHub repository. Additionally, you could use Markdown format in the copyright text.","navigation#Navigation":"Menu Top right menu is defined under the menu.main section in the config file:\nhugo.yamlmenu: main: - name: Documentation pageRef: /docs weight: 1 - name: Blog pageRef: /blog weight: 2 - name: About pageRef: /about weight: 3 - name: Search weight: 4 params: type: search - name: GitHub weight: 5 url: \"https://github.com/imfing/hextra\" params: icon: github There are different types of menu items:\nLink to a page in the site with pageRef - name: Documentation pageRef: /docs Link to an external URL with url - name: GitHub url: \"https://github.com\" Search bar with type: search - name: Search params: type: search Icon - name: GitHub params: icon: github These menu items can be sorted by setting the weight parameter.\nLogo and Title To modify the default logo, edit hugo.yaml and add the path to your logo file under static directory. Optionally, you can change the link that users are redirected to when clicking on your logo, as well as set the width \u0026 height of the logo in pixels.\nhugo.yamlparams: navbar: displayTitle: true displayLogo: true logo: path: images/logo.svg dark: images/logo-dark.svg link: / width: 40 height: 20 ","others#Others":"Favicon To customize the favicon for your site, place icon files under the static folder to override the default favicons from the theme:\nstatic android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon-dark.svg favicon.ico favicon.svg site.webmanifest Include both favicon.ico and favicon.svg files in your project to ensure your site’s favicons display correctly.\nWhile favicon.ico is generally for older browsers, favicon.svg is supported by modern ones. The optional favicon-dark.svg can be included for a tailored experience in dark mode. Feel free to use tools like favicon.io or favycon to generate these icons.\nTheme Configuration Use the theme setting to configure the default theme mode and toggle button, allowing visitors to switch between light or dark mode.\nhugo.yamlparams: theme: # light | dark | system default: system displayToggle: true Options for theme.default:\nlight - always use light mode dark - always use dark mode system - sync with the operating system setting (default) The theme.displayToggle parameter allows you to display a toggle button for changing themes. When set to true, visitors can switch between light or dark mode, overriding the default setting.\nPage Width The width of the page can be customized by the params.page.width parameter in the config file:\nhugo.yamlparams: page: # full (100%), wide (90rem), normal (1280px) width: wide There are three available options: full, wide, and normal. By default, the page width is set to normal.\nSimilarly, the width of the navbar and footer can be customized by the params.navbar.width and params.footer.width parameters.\nSearch Index Full-text search powered by FlexSearch is enabled by default. To customize the search index, set the params.search.flexsearch.index parameter in the config file:\nhugo.yamlparams: # Search search: enable: true type: flexsearch flexsearch: # index page by: content | summary | heading | title index: content Options for flexsearch.index:\ncontent - full content of the page (default) summary - summary of the page, see Hugo Content Summaries for more details heading - level 1 and level 2 headings title - only include the page title To exclude a page from the search index, set the excludeSearch: true in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration excludeSearch: true --- Google Analytics To enable Google Analytics, set services.googleAnalytics.ID flag in hugo.yaml:\nhugo.yamlservices: googleAnalytics: ID: G-MEASUREMENT_ID ","right-sidebar#Right Sidebar":"Table of Contents Table of contents is automatically generated from the headings in the content file. It can be disabled by setting toc: false in the front matter of the page.\ncontent/docs/guide/configuration.md--- title: Configuration toc: false --- Page Edit Link To configure the page edit link, we can set the params.editURL.base parameter in the config file:\nhugo.yamlparams: editURL: base: \"https://github.com/your-username/your-repo/edit/main\" The edit links will be automatically generated for each page based on the provided url as root directory. If you want to set edit link for a specific page, you can set the params.editURL parameter in the front matter of the page:\ncontent/docs/guide/configuration.md--- title: Configuration params: editURL: \"https://example.com/edit/this/page\" --- ","sidebar#Sidebar":"Main Sidebar For the main sidebar, it is automatically generated from the structure of the content directory. See the Organize Files page for more details.\nExtra Links Sidebar extra links are defined under the menu.sidebar section in the config file:\nhugo.yamlmenu: sidebar: - name: More params: type: separator weight: 1 - name: \"About\" pageRef: \"/about\" weight: 2 - name: \"Hugo Docs ↗\" url: \"https://gohugo.io/documentation/\" weight: 3 "},"title":"Configuration"},"/docs/guide/deploy-site/":{"data":{"":"Hugo generates static websites, allowing for flexible hosting options. This page provides guides for deploying your Hextra site on various platforms.","cloudflare-pages#Cloudflare Pages":" Put your site source code in a Git repository (e.g. GitHub) Log in to the Cloudflare dashboard and select your account In Account Home, select Workers \u0026 Pages \u003e Create application \u003e Pages \u003e Connect to Git Select the repository, and in the Set up builds and deployments section, provide the following information: Configuration Value Production branch main Build command hugo --gc --minify Build directory public For more details, check out:\nDeploy a Hugo site. Language support and tools. ","github-pages#GitHub Pages":"GitHub Pages is the recommended way to deploy and host your website for free.\nIf you bootstrap the site using hextra-starter-template, it has provided GitHub Actions workflow out-of-the-box that helps automatically deploy to GitHub Pages.\nGitHub Actions Configuration Below is an example configuration from hextra-starter-template:\n.github/workflows/pages.yaml# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: [\"main\"] # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued. # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete. concurrency: group: \"pages\" cancel-in-progress: false # Default to bash defaults: run: shell: bash jobs: # Build job build: runs-on: ubuntu-latest env: HUGO_VERSION: 0.117.0 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Go uses: actions/setup-go@v4 with: go-version: '1.21' - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.117.0' extended: true - name: Build with Hugo env: # For maximum backward compatibility with Hugo modules HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/\" - name: Upload artifact uses: actions/upload-pages-artifact@v2 with: path: ./public # Deployment job deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: Deploy to GitHub Pages id: deployment uses: actions/deploy-pages@v2 In your repository settings, set the Pages \u003e Build and deployment \u003e Source to GitHub Actions: By default, the above GitHub Actions workflow .github/workflows/pages.yaml assumes that the site is deploying to https://\u003cUSERNAME\u003e.github.io/\u003cREPO\u003e/.\nIf you are deploying to https://\u003cUSERNAME\u003e.github.io/ then modify the --baseURL:\n.github/workflows/pages.yaml 54 55 56 57 run: | hugo \\ --gc --minify \\ --baseURL \"https://${{ github.repository_owner }}.github.io/\" If you are deploying to your own domain, please change the --baseURL value accordingly.","netlify#Netlify":" Push your code to your Git repository (GitHub, GitLab, etc.) Import the project to Netlify If you are not using [hextra-starter-template][hextra-starter-template], configure the following manually: Configure the Build command to hugo --gc --minify Specify the Publish directory to public Add Environment variable HUGO_VERSION and set to 0.119.0 Deploy! Check Hugo on Netlify for more details.","vercel#Vercel":" Push your code to your Git repository (GitHub, GitLab, etc.) Go to Vercel Dashboard and import your Hugo project Configure the project, select Hugo as Framework Preset Override the Build Command and Install command: Set Build Command to hugo --gc --minify Set Install Command to yum install golang "},"title":"Deploy Site"},"/docs/guide/diagrams.zh-cn/":{"data":{"":"目前，Hextra 支持 Mermaid 的图表。","mermaid#Mermaid":"Mermaid 是一个基于 JavaScript 的图表绘制工具，它的文本定义和 Markdown 类似，可在浏览器中动态创建图表。例如：流程图、序列图、饼图等。\n在 Hextra 中使用 Mermaid 就像使用代码块一样简单：\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` 将呈现为：\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram：\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!如需获取更多信息，转至 Mermaid Documentation。"},"title":"图表"},"/docs/guide/diagrams/":{"data":{"":"Currently, Hextra supports Mermaid for diagrams.","mermaid#Mermaid":"Mermaid is a JavaScript based diagramming and charting tool that takes Markdown-inspired text definitions and creates diagrams dynamically in the browser. For example, Mermaid can render flow charts, sequence diagrams, pie charts and more.\nUsing Mermaid in Hextra is as simple as writing a code block with language set mermaid:\n```mermaid graph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD; ``` will be rendered as:\ngraph TD; A--\u003eB; A--\u003eC; B--\u003eD; C--\u003eD;Sequence diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good!For more information, please refer to Mermaid Documentation."},"title":"Diagrams"},"/docs/guide/latex.zh-cn/":{"data":{"":"$\\KaTeX$ 用于呈现 LaTeX 数学表达式。可在 frontmatter 将 math 设置为 true 来启用。\nMarkdown--- title: \"My Page with LaTeX\" math: true --- 启用后，KaTeX 中的脚本，样式表和字体将自动包含在你的网站中。这样就可以在 Markdown 内容中使用 LaTeX 数学表达式。","化学表达式#化学表达式":"通过 mhchem 支持化学表达式。\n行内：$\\ce{H2O}$ 是水。\n独立段落：\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","支持的功能#支持的功能":"有关支持的符号列表，转至 KaTeX 支持的公式。","示例#示例":"Markdown 内容支持行内和独立段落的 LaTeX 数学表达式。\n行内 page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\n独立段落 page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ 将被渲染为：\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$"},"title":"LaTeX 公式"},"/docs/guide/latex/":{"data":{"":"$\\KaTeX$ is used for rendering LaTeX math expressions. It can be enabled per page by setting math to true in the page front matter.\nMarkdown--- title: \"My Page with LaTeX\" math: true --- When enabled, the scripts, stylesheets and fonts from KaTeX will be included automatically in your site. You can start using LaTeX math expressions in your Markdown content.","chemistry#Chemistry":"Chemistry expressions are supported via mhchem extension.\nInline: $\\ce{H2O}$ is water.\nSeparate paragraph:\npage.md$$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$ $$\\ce{Hg^2+ -\u003e[I-] HgI2 -\u003e[I-] [Hg^{II}I4]^2-}$$","example#Example":"Both inline and separate paragraph LaTeX math expressions are supported in the Markdown content.\nInline page.mdThis $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline. This $\\sigma(z) = \\frac{1}{1 + e^{-z}}$ is inline.\nSeparate Paragraph page.md$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} \\, dt$$ will be rendered as:\n$$F(\\omega) = \\int_{-\\infty}^{\\infty} f(t) e^{-j\\omega t} , dt$$","supported-functions#Supported Functions":"For a list of supported functions, see KaTeX supported functions."},"title":"LaTeX"},"/docs/guide/markdown.zh-cn/":{"data":{"":"Hugo 支持 Markdown 来书写内容，创建列表等。本页将向你展示一些最常见的 Markdown 语法示例。","markdown-示例#Markdown 示例":"文本样式 Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text 引用 带角标的块引用：\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n表格 表格并非核心 Markdown 规范，但 Hugo 支持开箱即用的表格：\nName Age Bob 27 Alice 23 Markdown 表格中的内联 Italics Bold Code italics bold code 代码块 Syntax Highlighting 列表 有序列表 First item Second item Third item 无序列表 List item Another item And another item 嵌套列表 Fruit Apple Orange Banana Dairy Milk Cheese 图片 带有标题：\nUnsplash Landscape The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎","参考资料#参考资料":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","配置#配置":"Hugo 使用 Goldmark 解析 Markdown。 Markdown 渲染可以在 hugo.yaml 中的 markup.goldmark 中配置。以下是Hextra的默认配置：\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false 如需了解更多选项，转至 Configure Markup。"},"title":"Markdown"},"/docs/guide/markdown/":{"data":{"":"Hugo supports Markdown syntax for formatting text, creating lists, and more. This page will show you some of the most common Markdown syntax examples.","configuration#Configuration":"Hugo uses Goldmark for Markdown parsing. Markdown rendering can be configured in hugo.yaml under markup.goldmark. Below is the default configuration for Hextra:\nhugo.yamlmarkup: goldmark: renderer: unsafe: true highlight: noClasses: false For more configuration options, see Hugo documentation on Configure Markup.","learning-resources#Learning Resources":" Markdown Guide Markdown Cheatsheet Markdown Tutorial Markdown Reference ","markdown-examples#Markdown Examples":"Styling Text Style Syntax Example Output Bold **bold text** **bold text** bold text Italic *italicized text* `italicized text italicized text Strikethrough ~~strikethrough text~~ ~~strikethrough text~~ strikethrough text Subscript \u003csub\u003e\u003c/sub\u003e This is a \u003csub\u003esubscript\u003c/sub\u003e text This is a subscript text Superscript \u003csup\u003e\u003c/sup\u003e This is a \u003csup\u003esuperscript\u003c/sup\u003e text This is a superscript text Blockquotes Blockquote with attribution\nDon’t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren’t part of the core Markdown spec, but Hugo supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Syntax Highlighting Lists Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Images With caption:\nUnsplash Landscape The above quote is excerpted from Rob Pike’s talk during Gopherfest, November 18, 2015. ↩︎"},"title":"Markdown"},"/docs/guide/organize-files.zh-cn/":{"data":{"":"","侧边栏导航#侧边栏导航":"侧边栏导航是根据内容组织的字母顺序自动生成的。要手动配置侧边栏顺序，可以在 Markdown 文件的 frontmatter 中使用 weight 配置。\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ 建议侧边栏不要太深。如果内容太多，请考虑 将它们分成多个部分。 ","目录结构#目录结构":"默认情况下，Hugo 在 context 目录中搜索 Markdown 文件，目录的结构决定了网站的最终输出结构。 以示例网站为例：\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md 每个 _index.md 文件都是相应部分的索引页，其他 Markdown 文件则是常规页面。\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","配置内容目录#配置内容目录":"如果需要为的内容使用不同的目录，可以在站点配置文件中设置 contentDir 来实现。"},"title":"目录结构"},"/docs/guide/organize-files/":{"data":{"":"","add-images#Add Images":"To add images, the easiest way is to put the image files in the same directory as the Markdown file. For example, add an image file image.png alongside the my-page.md file:\ncontent docs my-page.md image.png Then, we can use the following Markdown syntax to add the image to the content:\ncontent/docs/my-page.md![](image.png) We can also utilize the page bundles feature of Hugo to organize the image files together with the Markdown file. To achieve that, turn the my-page.md file into a directory my-page and put the content into a file named index.md, and put the image files inside the my-page directory:\ncontent docs my-page index.md image.png content/docs/my-page/index.md![](image.png) Alternatively, we can also put the image files in the static directory, which will make the images available for all pages:\nstatic images image.png content docs my-page.md Note that the image path begins with a slash / and is relative to the static directory:\ncontent/docs/my-page.md![](/images/image.png) ","configure-content-directory#Configure Content Directory":"By default, the root content/ directory is used by Hugo to build the site. If you need to use a different directory for content, for example docs/, this can be done by setting the contentDir parameter in the site configuration hugo.yaml.","directory-structure#Directory Structure":"By default, Hugo searches for Markdown files in the content directory, and the structure of the directory determines the final output structure of your website. Take this site as an example:\ncontent _index.md docs _index.md getting-started.md guide _index.md organize-files.md blog _index.md post-1.md Each of the _index.md files is the index page for the corresponding section. The other Markdown files are regular pages.\ncontent ├── _index.md // \u003c- / ├── docs │ ├── _index.md // \u003c- /docs/ │ ├── getting-started.md // \u003c- /docs/getting-started/ │ └── guide │ ├── _index.md // \u003c- /docs/guide/ │ └── organize-files.md // \u003c- /docs/guide/organize-files/ └── blog ├── _index.md // \u003c- /blog/ └── post-1.md // \u003c- /blog/post-1/ ","layouts#Layouts":"Hextra offers three layouts for different content types:\nLayout Directory Features docs content/docs/ Ideal for structured documentation, same as this section. blog content/blog/ For blog postings, with both listing and detailed article views. default All other directories Single-page article view without sidebar. To customize a section to mirror the behavior of a built-in layout, specify the desired type in the front matter of the section’s _index.md.\ncontent/my-docs/_index.md--- title: My Docs cascade: type: docs --- The above example configuration ensures that the content files inside content/my-docs/ will be treated as documentation (docs type) by default.","sidebar-navigation#Sidebar Navigation":"The sidebar navigation is generated automatically based on the content organization alphabetically. To manually configure the sidebar order, we can use the weight parameter in the front matter of the Markdown files.\ncontent/docs/guide/_index.md--- title: Guide weight: 2 --- ℹ️ It is recommended to keep the sidebar not too deep. If you have a lot of content, consider splitting them into multiple sections. "},"title":"Organize Files"},"/docs/guide/shortcodes/":{"data":{"":"Hugo Shortcodes are simple snippets inside your content files calling built-in or custom templates.\nHextra provides a collection of beautiful shortcodes to enhance your content.\nCallout Cards Details FileTree Icon Steps Tabs "},"title":"Shortcodes"},"/docs/guide/shortcodes/callout/":{"data":{"":"A built-in component to show important information to the reader.","example#Example":" 👾 A callout is a short piece of text intended to attract attention. ℹ️ A callout is a short piece of text intended to attract attention. ⚠️ A callout is a short piece of text intended to attract attention. 🚫 A callout is a short piece of text intended to attract attention. ","usage#Usage":"Default 🌐 Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c callout emoji=\"🌐\" \u003e}} Hugo can be used to create a wide variety of websites, including blogs, portfolios, documentation sites, and more. {{\u003c /callout \u003e}} Info ℹ️ Please visit GitHub to see the latest releases. {{\u003c callout type=\"info\" \u003e}} Please visit GitHub to see the latest releases. {{\u003c /callout \u003e}} Warning ⚠️ This API will be deprecated in the next version. {{\u003c callout type=\"warning\" \u003e}} A **callout** is a short piece of text intended to attract attention. {{\u003c /callout \u003e}} Error 🚫 Something went wrong and it’s going to explode. {{\u003c callout type=\"error\" \u003e}} Something went wrong and it's going to explode. {{\u003c /callout \u003e}} "},"title":"Callout"},"/docs/guide/shortcodes/cards/":{"data":{"":"","card-parameters#Card Parameters":" Parameter Description link URL (internal or external). title Title heading for the card. subtitle Subtitle heading (supports Markdown). icon Name of the icon. ","example#Example":" Callout No Icon Image CardUnsplash Landscape Local ImageRaw image under static directory. Local ImageImage under assets directory, processed by Hugo. ","image-card#Image Card":"Additionally, the card supports adding image and processing through these parameters:\nParameter Description image Specifies the image URL for the card. method Sets Hugo’s image processing method. options Configures Hugo’s image processing options. Card supports three kinds of images:\nRemote image: the full URL in the image parameter. Static image: use the relative path in Hugo’s static/ directory. Processed image: use the relative path in Hugo’s assets/ directory. Hextra auto-detects if image processing is needed during build and applies the options parameter or default settings (Resize, 800x, Quality 80, WebP Format). It currently supports these method: Resize, Fit, Fill and Crop.\nFor more on Hugo’s built in image processing commands, methods, and options see their Image Processing Documentation.","usage#Usage":"{{\u003c/* cards */\u003e}} {{\u003c/* card link=\"../callout\" title=\"Callout\" icon=\"warning\" */\u003e}} {{\u003c/* card link=\"/\" title=\"No Icon\" */\u003e}} {{\u003c/* /cards */\u003e}} {{\u003c/* cards */\u003e}} {{\u003c/* card link=\"/\" title=\"Image Card\" image=\"https://source.unsplash.com/featured/800x600?landscape\" subtitle=\"Unsplash Landscape\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"/images/card-image-unprocessed.jpg\" subtitle=\"Raw image under static directory.\" */\u003e}} {{\u003c/* card link=\"/\" title=\"Local Image\" image=\"images/space.jpg\" subtitle=\"Image under assets directory, processed by Hugo.\" method=\"Resize\" options=\"600x q80 webp\" */\u003e}} {{\u003c/* /cards */\u003e}} "},"title":"Cards"},"/docs/guide/shortcodes/details/":{"data":{"":"A built-in component to display a collapsible content.","example#Example":" Details This is the content of the details.\nMarkdown is supported.\nClick me to reveal This will be hidden by default. ","usage#Usage":"{{%/* details title=\"Details\" */%}} This is the content of the details. Markdown is **supported**. {{%/* /details */%}} {{%/* details title=\"Click me to reveal\" closed=\"true\" */%}} This will be hidden by default. {{%/* /details */%}} "},"title":"Details"},"/docs/guide/shortcodes/filetree/":{"data":{"":"","example#Example":" content _index.md docs _index.md introduction.md introduction.fr.md hugo.toml ","usage#Usage":"Markdown{{\u003c/* filetree/container */\u003e}} {{\u003c/* filetree/folder name=\"content\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/folder name=\"docs\" state=\"closed\" */\u003e}} {{\u003c/* filetree/file name=\"_index.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.md\" */\u003e}} {{\u003c/* filetree/file name=\"introduction.fr.md\" */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* /filetree/folder */\u003e}} {{\u003c/* filetree/file name=\"hugo.toml\" */\u003e}} {{\u003c/* /filetree/container */\u003e}} "},"title":"FileTree"},"/docs/guide/shortcodes/icon/":{"data":{"":"To use this shortcode inline, inline shortcode needs to be enabled in the config:\nhugo.yamlenableInlineShortcodes: true List of available icons can be found in data/icons.yaml.","example#Example":" ","usage#Usage":"{{\u003c/* icon \"github\" */\u003e}} Heroicons v1 outline icons are available out of the box.\nHow to add your own icons Create data/icons.yaml file, then add your own SVG icons in the following format:\ndata/icons.yamlyour-icon: \u003csvg\u003eyour icon svg content\u003c/svg\u003e It then can be used in the shortcode like this:\n{{\u003c/* icon \"your-icon\" */\u003e}} {{\u003c/* card icon=\"your-icon\" */\u003e}} Tip: Iconify Design is a great place to find SVG icons for your site."},"title":"Icon"},"/docs/guide/shortcodes/steps/":{"data":{"":"A built-in component to display a series of steps.","example#Example":" Step 1 This is the first step.\nStep 2 This is the second step.\nStep 3 This is the third step.","usage#Usage":"Put Markdown h3 header within steps shortcode.\n{{%/* steps */%}} ### Step 1 This is the first step. ### Step 2 This is the second step. {{%/* /steps */%}} "},"title":"Steps"},"/docs/guide/shortcodes/tabs/":{"data":{"":"","example#Example":"JSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. ","usage#Usage":"Default {{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} Specify Selected Index Use defaultIndex property to specify the selected tab. The index starts from 0.\n{{\u003c tabs items=\"JSON,YAML,TOML\" defaultIndex=\"1\" \u003e}} {{\u003c tab \u003e}}**JSON**: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**YAML**: YAML is a human-readable data serialization language.{{\u003c /tab \u003e}} {{\u003c tab \u003e}}**TOML**: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.{{\u003c /tab \u003e}} {{\u003c /tabs \u003e}} The YAML tab will be selected by default.\nJSONYAMLTOML JSON: JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. YAML: YAML is a human-readable data serialization language. TOML: TOML aims to be a minimal configuration file format that’s easy to read due to obvious semantics. Use Markdown Markdown syntax including code block is also supported:\n{{\u003c tabs items=\"JSON,YAML,TOML\" \u003e}} {{\u003c tab \u003e}} ```json { \"hello\": \"world\" } ``` {{\u003c /tab \u003e}} ... add other tabs similarly {{\u003c /tabs \u003e}} JSONYAMLTOML { \"hello\": \"world\" } hello: world hello = \"world\" "},"title":"Tabs"},"/docs/guide/syntax-highlighting.zh-cn/":{"data":{"":"Hugo 使用 Chroma，一种纯 Golang 实现的代码高亮渲染器。 建议对 Markdown 内容中的代码块使用反引号，例如：\nMarkdown```python def say_hello(): print(\"Hello!\") ``` 将呈现为：\ndef say_hello(): print(\"Hello!\") ","支持的编程语言#支持的编程语言":"如需了解支持的编程语言，转至 Chroma’s documentation。","特性#特性":"文件名 要向代码块添加文件名或标题，请设置 filename：\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") 行号 如需设置行号，将 linenos 设置为 table，并将 linenostart 设置为起始行号：\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") 高亮行 显示高亮行，设置 hl_lines 为行号：\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() 复制按钮 默认情况下，代码块复制按钮已自动启用。"},"title":"代码高亮"},"/docs/guide/syntax-highlighting/":{"data":{"":"Hugo uses Chroma, a general purpose syntax highlighter in pure Go, for syntax highlighting. It is recommended to use backticks for code blocks in Markdown content. For example:\nMarkdown```python def say_hello(): print(\"Hello!\") ``` will be rendered as:\ndef say_hello(): print(\"Hello!\") ","features#Features":"Filename To add a filename or title to the code block, set attribute filename:\nMarkdown```python {filename=\"hello.py\"} def say_hello(): print(\"Hello!\") ``` hello.pydef say_hello(): print(\"Hello!\") Line Numbers To set line numbers, set attribute linenos to table and optionally set linenostart to the starting line number:\nMarkdown```python {linenos=table,linenostart=42} def say_hello(): print(\"Hello!\") ``` 42 43 def say_hello(): print(\"Hello!\") Highlighting Lines To highlight lines, set attribute hl_lines to a list of line numbers:\nMarkdown```python {linenos=table,hl_lines=[2,4],linenostart=1,filename=\"hello.py\"} def say_hello(): print(\"Hello!\") def main(): say_hello() ``` hello.py 1 2 3 4 5 def say_hello(): print(\"Hello!\") def main(): say_hello() Copy Button By default, copy button is enabled for code blocks.","supported-languages#Supported Languages":"For a list of supported languages, please see the Chroma documentation."},"title":"Syntax Highlighting"}}